/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 10 21:07:12 GMT 2024
 */

package br.com.swconsultoria.nfe.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.swconsultoria.nfe.schema.consCad.TConsCad;
import br.com.swconsultoria.nfe.schema.distdfeint.DistDFeInt;
import br.com.swconsultoria.nfe.schema.envConfRecebto.TProcEvento;
import br.com.swconsultoria.nfe.schema.envEventoCancNFe.TEnvEvento;
import br.com.swconsultoria.nfe.schema.envEventoCancSubst.TRetEnvEvento;
import br.com.swconsultoria.nfe.schema.retConsCad.TRetConsCad;
import br.com.swconsultoria.nfe.schema.retdistdfeint.RetDistDFeInt;
import br.com.swconsultoria.nfe.schema_4.consReciNFe.TConsReciNFe;
import br.com.swconsultoria.nfe.schema_4.consSitNFe.TConsSitNFe;
import br.com.swconsultoria.nfe.schema_4.consStatServ.TConsStatServ;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TEnviNFe;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TNfeProc;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TRetEnviNFe;
import br.com.swconsultoria.nfe.schema_4.inutNFe.TInutNFe;
import br.com.swconsultoria.nfe.schema_4.inutNFe.TProcInutNFe;
import br.com.swconsultoria.nfe.schema_4.inutNFe.TRetInutNFe;
import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TProtNFe;
import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TRetConsReciNFe;
import br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TRetConsSitNFe;
import br.com.swconsultoria.nfe.schema_4.retConsStatServ.TRetConsStatServ;
import br.com.swconsultoria.nfe.util.XmlNfeUtil;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.nio.charset.Charset;
import java.nio.file.AccessDeniedException;
import java.nio.file.InvalidPathException;
import java.nio.file.NoSuchFileException;
import java.security.InvalidParameterException;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlNfeUtil_ESTest extends XmlNfeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("?T_Z2^h-vq'M*a@", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><retConsReciNFe versao=\"tfG~*ms$WgN>SHiFo\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"><verAplic>ui+H!wk+</verAplic></retConsReciNFe>");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave deve conter 44 caracteres.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = XmlNfeUtil.geraHashCSRT("<NFe xln.=\"http://www.portliscal.if.br/nfe\">", "br.com.swconsultoria.nfe.schema_4.enviNFe.TProtNFe");
      assertEquals(28, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(570L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(546);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      String string0 = XmlNfeUtil.dataNfe(localDateTime0, (ZoneId) zoneOffset0);
      assertEquals("1970-01-01T00:09:30Z", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      String string0 = XmlNfeUtil.dataNfe(localDateTime0);
      assertEquals("2014-02-14T20:21:21Z", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.xmlToObject("<?xml version=\"1.0\" encoding=\"windows-1252\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", (Class<TRetEnvEvento>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.bind.JAXBContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.objectToXml((Object) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.objectToXml((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        XmlNfeUtil.leXml("/");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("<?xml version=\"1.0\" encoding=\"windows-1252\"?><retConsStatServ versao=\"\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"><xMotivo></xMotivo></retConsStatServ>");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procInutNFe versao=\"\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", "");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // CSRT n\u00E3o deve ser nulo ou vazio
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      // Undeclared exception!
      try { 
        XmlNfeUtil.dataNfe(localDateTime0, (ZoneId) zoneOffset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TProcEvento tProcEvento0 = new TProcEvento();
      // Undeclared exception!
      try { 
        XmlNfeUtil.criaNfeProc((TEnviNFe) null, tProcEvento0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        XmlNfeUtil.leXml(".");
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TRetEnvEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TRetEnvEvento tRetEnvEvento0 = new TRetEnvEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envConfRecebto.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envConfRecebto.TRetEnvEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envcce.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envcce.TRetEnvEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoCancNFe.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoCancNFe.TRetEnvEvento();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, (Charset) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0, (Charset) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TProcEvento();
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      TProcEvento tProcEvento0 = new TProcEvento();
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEpec.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envEpec.TProcEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TProcInutNFe tProcInutNFe0 = new TProcInutNFe();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tProcInutNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procInutNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DistDFeInt distDFeInt0 = new DistDFeInt();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) distDFeInt0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><distDFeInt xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RetDistDFeInt retDistDFeInt0 = new RetDistDFeInt();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) retDistDFeInt0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><retDistDFeInt xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TConsSitNFe tConsSitNFe0 = new TConsSitNFe();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tConsSitNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><consSitNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TConsCad tConsCad0 = new TConsCad();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tConsCad0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><ConsCad xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      TRetConsCad tRetConsCad0 = new TRetConsCad();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetConsCad0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><retConsCad xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Class<XmlNfeUtil> class0 = XmlNfeUtil.class;
      XmlNfeUtil xmlNfeUtil0 = XmlNfeUtil.xmlToObject("<?xml version=\"1.0\" encoding=\"windows-1252\"?><retConsStatServ xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", class0);
      try { 
        XmlNfeUtil.objectToXml((Object) xmlNfeUtil0, charset0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Objeto n\u00E3o mapeado no XmlUtil:XmlNfeUtil
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TRetConsStatServ tRetConsStatServ0 = new TRetConsStatServ();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetConsStatServ0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><retConsStatServ xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TNFe tNFe0 = new TNFe();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><NFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TConsReciNFe tConsReciNFe0 = new TConsReciNFe();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tConsReciNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><consReciNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(15);
      // Undeclared exception!
      try { 
        XmlNfeUtil.dataNfe((LocalDateTime) null, (ZoneId) zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("<?xml version=\"1.0\" encoding=\"windows-1252\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", "<?xml version=\"1.0\" encoding=\"windows-1252\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave deve conter 44 caracteres.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        XmlNfeUtil.leXml("br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TProtNFe");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Arquivo br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TProtNFe n\u00E3o encontrado.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arquivo xml n\u00E3o pode ser nulo/vazio.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = XmlNfeUtil.gZipToXml(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = XmlNfeUtil.gZipToXml((byte[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TProtNFe tProtNFe0 = new TProtNFe();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tProtNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      br.com.swconsultoria.nfe.schema_4.enviNFe.TProtNFe tProtNFe0 = new br.com.swconsultoria.nfe.schema_4.enviNFe.TProtNFe();
      String string0 = XmlNfeUtil.objectToXml((Object) tProtNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TRetEnvEvento();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      br.com.swconsultoria.nfe.schema.envEpec.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEpec.TRetEnvEvento();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envConfRecebto.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envConfRecebto.TEnvEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoCancSubst.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoCancSubst.TEnvEvento();
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0, (Charset) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envcce.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envcce.TEnvEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEpec.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEpec.TEnvEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoCancNFe.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envEventoCancNFe.TProcEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      br.com.swconsultoria.nfe.schema.envcce.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envcce.TProcEvento();
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoCancSubst.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envEventoCancSubst.TProcEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        XmlNfeUtil.objectToXml((Object) charset0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Objeto n\u00E3o mapeado no XmlUtil:MS1252
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TProtNFe tProtNFe0 = new br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TProtNFe();
      String string0 = XmlNfeUtil.objectToXml((Object) tProtNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TRetConsReciNFe tRetConsReciNFe0 = new TRetConsReciNFe();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetConsReciNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><retConsReciNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TRetConsSitNFe tRetConsSitNFe0 = new TRetConsSitNFe();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetConsSitNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><retConsSitNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      String string0 = XmlNfeUtil.objectToXml((Object) tEnviNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><enviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TInutNFe tInutNFe0 = new TInutNFe();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tInutNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><inutNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TNfeProc tNfeProc0 = new TNfeProc();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tNfeProc0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><nfeProc xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TConsStatServ tConsStatServ0 = new TConsStatServ();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tConsStatServ0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><consStatServ xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      TRetEnviNFe tRetEnviNFe0 = new TRetEnviNFe();
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnviNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><retEnviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TEnvEvento();
      Charset charset0 = Charset.defaultCharset();
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Class<TRetInutNFe> class0 = TRetInutNFe.class;
      TRetInutNFe tRetInutNFe0 = XmlNfeUtil.xmlToObject("<?xml version=\"1.0\" encoding=\"windows-1252\"?><consStatServ xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", class0);
      String string0 = XmlNfeUtil.objectToXml((Object) tRetInutNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procInutNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.dataNfe((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      // Undeclared exception!
      try { 
        XmlNfeUtil.criaNfeProc(tEnviNFe0, "<?xml version=\"1.0\" encoding=\"windows-1252\"?><enviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
