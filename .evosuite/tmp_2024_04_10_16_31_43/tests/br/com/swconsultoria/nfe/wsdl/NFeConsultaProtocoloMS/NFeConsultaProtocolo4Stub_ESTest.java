/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 10 22:52:11 GMT 2024
 */

package br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4CallbackHandler;
import br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.dom.WstxDOMWrappingWriter;
import com.ctc.wstx.io.StreamBootstrapper;
import com.ctc.wstx.stax.WstxInputFactory;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import java.io.CharArrayReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.util.NoSuchElementException;
import javax.xml.namespace.QName;
import javax.xml.stream.StreamFilter;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.stream.util.StreamReaderDelegate;
import javax.xml.transform.dom.DOMResult;
import org.apache.axiom.core.NodeFactory;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMMetaFactory;
import org.apache.axiom.om.OMMetaFactoryLocator;
import org.apache.axiom.om.OMXMLStreamReaderConfiguration;
import org.apache.axiom.om.ds.WrappedTextNodeOMDataSourceFromReader;
import org.apache.axiom.om.impl.dom.OMSourcedElementImpl;
import org.apache.axiom.om.impl.dom.factory.OMDOMMetaFactory;
import org.apache.axiom.soap.SOAPBody;
import org.apache.axiom.soap.SOAPFactory;
import org.apache.axiom.soap.SOAPFault;
import org.apache.axiom.soap.impl.common.SOAP12Factory;
import org.apache.axiom.soap.impl.dom.soap12.SOAP12BodyImpl;
import org.apache.axiom.soap.impl.dom.soap12.SOAP12FaultReasonImpl;
import org.apache.axiom.soap.impl.dom.soap12.SOAP12FaultValueImpl;
import org.apache.axiom.soap.impl.dom.soap12.SOAP12HeaderBlockImpl;
import org.apache.axiom.soap.impl.llom.soap11.SOAP11FaultReasonImpl;
import org.apache.axis2.AxisFault;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.databinding.ADBException;
import org.apache.axis2.description.AxisOperation;
import org.apache.axis2.engine.AxisConfiguration;
import org.codehaus.stax2.XMLStreamReader2;
import org.codehaus.stax2.ri.Stax2FilteredStreamReader;
import org.codehaus.stax2.ri.Stax2ReaderAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NFeConsultaProtocolo4Stub_ESTest extends NFeConsultaProtocolo4Stub_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLStreamReader2 xMLStreamReader2_0 = Stax2ReaderAdapter.wrapIfNecessary((XMLStreamReader) null);
      try { 
        NFeConsultaProtocolo4Stub.ExtensionMapper.getTypeObject("", "8Vn 2", xMLStreamReader2_0);
        fail("Expecting exception: ADBException");
      
      } catch(ADBException e) {
         //
         // Unsupported type  8Vn 2
         //
         verifyException("br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub$ExtensionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SOAP12HeaderBlockImpl sOAP12HeaderBlockImpl0 = new SOAP12HeaderBlockImpl();
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      nFeConsultaProtocolo4Stub_NfeResultMsg0.setExtraElement(sOAP12HeaderBlockImpl0);
      assertEquals((short)1, sOAP12HeaderBlockImpl0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      StreamBootstrapper streamBootstrapper0 = StreamBootstrapper.getInstance("org.codehaus.stax2.propDtdOverride", "", (byte[]) null, 7, (-1660));
      XMLStreamReader2 xMLStreamReader2_0 = wstxInputFactory0.createSR(readerConfig0, "", streamBootstrapper0, true, true);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(xMLStreamReader2_0);
      try { 
        NFeConsultaProtocolo4Stub.NfeResultMsg.Factory.parse(streamReaderDelegate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog\r
         //  at com.ctc.wstx.io.WstxInputLocation@0000000014
         //
         verifyException("br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub$NfeResultMsg$Factory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AxisConfiguration axisConfiguration0 = new AxisConfiguration();
      ConfigurationContext configurationContext0 = new ConfigurationContext(axisConfiguration0);
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub(configurationContext0);
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      OMMetaFactoryLocator oMMetaFactoryLocator0 = mock(OMMetaFactoryLocator.class, new ViolatedAssumptionAnswer());
      doReturn((OMMetaFactory) null).when(oMMetaFactoryLocator0).getOMMetaFactory(anyString());
      OMAbstractFactory.setMetaFactoryLocator(oMMetaFactoryLocator0);
      NFeConsultaProtocolo4CallbackHandler nFeConsultaProtocolo4CallbackHandler0 = mock(NFeConsultaProtocolo4CallbackHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nFeConsultaProtocolo4Stub0.startnfeConsultaNF(nFeConsultaProtocolo4Stub_NfeDadosMsg0, nFeConsultaProtocolo4CallbackHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No meta factory found for feature 'default'; this usually means that axiom-impl.jar is not in the classpath or that the META-INF/axiom.xml resource can't be read
         //
         verifyException("org.apache.axiom.om.OMAbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AxisConfiguration axisConfiguration0 = new AxisConfiguration();
      ConfigurationContext configurationContext0 = new ConfigurationContext(axisConfiguration0);
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub(configurationContext0);
      NFeConsultaProtocolo4CallbackHandler nFeConsultaProtocolo4CallbackHandler0 = mock(NFeConsultaProtocolo4CallbackHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nFeConsultaProtocolo4Stub0.startnfeConsultaNF((NFeConsultaProtocolo4Stub.NfeDadosMsg) null, nFeConsultaProtocolo4CallbackHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AxisConfiguration axisConfiguration0 = new AxisConfiguration();
      ConfigurationContext configurationContext0 = new ConfigurationContext(axisConfiguration0);
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub(configurationContext0);
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      AxisOperation[] axisOperationArray0 = new AxisOperation[0];
      nFeConsultaProtocolo4Stub0._operations = axisOperationArray0;
      NFeConsultaProtocolo4CallbackHandler nFeConsultaProtocolo4CallbackHandler0 = mock(NFeConsultaProtocolo4CallbackHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nFeConsultaProtocolo4Stub0.startnfeConsultaNF(nFeConsultaProtocolo4Stub_NfeDadosMsg0, nFeConsultaProtocolo4CallbackHandler0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = null;
      try {
        nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub((ConfigurationContext) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = null;
      try {
        nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub((ConfigurationContext) null, "TRANSPORT_OUT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = null;
      try {
        nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub((ConfigurationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AxisConfiguration axisConfiguration0 = new AxisConfiguration();
      ConfigurationContext configurationContext0 = new ConfigurationContext(axisConfiguration0);
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub(configurationContext0, "UTF-8", true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      OMSourcedElementImpl oMSourcedElementImpl0 = new OMSourcedElementImpl();
      OMFactory oMFactory0 = oMSourcedElementImpl0.getOMFactory();
      OMElement oMElement0 = nFeConsultaProtocolo4Stub_NfeDadosMsg0.getOMElement(nFeConsultaProtocolo4Stub_NfeDadosMsg0.MY_QNAME, oMFactory0);
      assertNotSame(oMSourcedElementImpl0, oMElement0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AxisConfiguration axisConfiguration0 = new AxisConfiguration();
      ConfigurationContext configurationContext0 = new ConfigurationContext(axisConfiguration0);
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub(configurationContext0, "CopyProperties");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SOAP12FaultReasonImpl sOAP12FaultReasonImpl0 = new SOAP12FaultReasonImpl();
      XMLStreamReader xMLStreamReader0 = sOAP12FaultReasonImpl0.getXMLStreamReader(false);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      Stax2FilteredStreamReader stax2FilteredStreamReader0 = new Stax2FilteredStreamReader(xMLStreamReader0, streamFilter0);
      try { 
        NFeConsultaProtocolo4Stub.NfeDadosMsg.Factory.parse(stax2FilteredStreamReader0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // End of the document reached
         //
         verifyException("org.apache.axiom.om.impl.common.serializer.pull.EndDocumentState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QName qName0 = new QName("4");
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      WrappedTextNodeOMDataSourceFromReader wrappedTextNodeOMDataSourceFromReader0 = new WrappedTextNodeOMDataSourceFromReader(qName0, charArrayReader0);
      XMLStreamReader xMLStreamReader0 = wrappedTextNodeOMDataSourceFromReader0.getReader();
      try { 
        NFeConsultaProtocolo4Stub.NfeDadosMsg.Factory.parse(xMLStreamReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.apache.axis2.databinding.ADBException: Unexpected subelement null
         //
         verifyException("br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub$NfeDadosMsg$Factory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      QName qName0 = new QName("CopyProperties");
      File file0 = MockFile.createTempFile("CopyProperties", "xJk=,`9$~9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("E$OaDOu&IZv*Yq");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "xJk=,`9$~9", false, mockPrintStream0, 112);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "8E0O", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      try { 
        nFeConsultaProtocolo4Stub_NfeDadosMsg0.serialize(qName0, (XMLStreamWriter) streamWriter2Delegate0);
        fail("Expecting exception: XMLStreamException");
      
      } catch(XMLStreamException e) {
         //
         // Can not set write namespaces with non-namespace writer.
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      OMDOMMetaFactory oMDOMMetaFactory0 = OMDOMMetaFactory.INSTANCE;
      SOAP12FaultValueImpl sOAP12FaultValueImpl0 = new SOAP12FaultValueImpl();
      NodeFactory nodeFactory0 = sOAP12FaultValueImpl0.coreGetNodeFactory();
      SOAP12Factory sOAP12Factory0 = new SOAP12Factory(oMDOMMetaFactory0, nodeFactory0);
      SOAPFault sOAPFault0 = sOAP12Factory0.createSOAPFault((SOAPBody) null);
      nFeConsultaProtocolo4Stub_NfeDadosMsg0.setExtraElement(sOAPFault0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(dataOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "org.codehaus.stax2.reportPrologWhitespace", writerConfig0);
      // Undeclared exception!
      try { 
        nFeConsultaProtocolo4Stub_NfeDadosMsg0.serialize(nFeConsultaProtocolo4Stub_NfeResultMsg0.MY_QNAME, (XMLStreamWriter) simpleNsStreamWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      MockFile mockFile0 = new MockFile("CopyProperties", "CopyProperties");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "org.codehaus.stax2.internNames", writerConfig0);
      try { 
        nFeConsultaProtocolo4Stub_NfeDadosMsg0.serialize(nFeConsultaProtocolo4Stub_NfeResultMsg0.MY_QNAME, (XMLStreamWriter) repairingNsStreamWriter0, true);
        fail("Expecting exception: ADBException");
      
      } catch(ADBException e) {
         //
         // extraElement cannot be null!!
         //
         verifyException("br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub$NfeDadosMsg", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SOAP12BodyImpl sOAP12BodyImpl0 = new SOAP12BodyImpl();
      OMXMLStreamReaderConfiguration oMXMLStreamReaderConfiguration0 = new OMXMLStreamReaderConfiguration();
      XMLStreamReader xMLStreamReader0 = sOAP12BodyImpl0.getXMLStreamReader(true, oMXMLStreamReaderConfiguration0);
      try { 
        NFeConsultaProtocolo4Stub.NfeResultMsg.Factory.parse(xMLStreamReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      OMSourcedElementImpl oMSourcedElementImpl0 = new OMSourcedElementImpl();
      QName qName0 = oMSourcedElementImpl0.resolveQName("fVE,ftQ;uWH4omO3M");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      DOMResult dOMResult0 = new DOMResult(oMSourcedElementImpl0);
      WstxDOMWrappingWriter wstxDOMWrappingWriter0 = WstxDOMWrappingWriter.createFrom(writerConfig0, dOMResult0);
      // Undeclared exception!
      try { 
        nFeConsultaProtocolo4Stub_NfeResultMsg0.serialize(qName0, (XMLStreamWriter) wstxDOMWrappingWriter0, false);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.axiom.dom.DOMExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      MockFile mockFile0 = new MockFile("nfeResultMsg", "CopyProperties");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      SOAP11FaultReasonImpl sOAP11FaultReasonImpl0 = new SOAP11FaultReasonImpl();
      nFeConsultaProtocolo4Stub_NfeResultMsg0.localExtraElement = (OMElement) sOAP11FaultReasonImpl0;
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "CopyProperties", writerConfig0);
      // Undeclared exception!
      try { 
        nFeConsultaProtocolo4Stub_NfeResultMsg0.serialize(nFeConsultaProtocolo4Stub_NfeDadosMsg0.MY_QNAME, (XMLStreamWriter) repairingNsStreamWriter0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.axiom.om.impl.common.AxiomNamedInformationItemSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      MockFile mockFile0 = new MockFile("nfeResultMsg", "CopyProperties");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "CopyProperties", writerConfig0);
      try { 
        nFeConsultaProtocolo4Stub_NfeResultMsg0.serialize(nFeConsultaProtocolo4Stub_NfeDadosMsg0.MY_QNAME, (XMLStreamWriter) repairingNsStreamWriter0, true);
        fail("Expecting exception: ADBException");
      
      } catch(ADBException e) {
         //
         // extraElement cannot be null!!
         //
         verifyException("br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub$NfeResultMsg", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AxisConfiguration axisConfiguration0 = new AxisConfiguration();
      ConfigurationContext configurationContext0 = new ConfigurationContext(axisConfiguration0);
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub(configurationContext0);
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      try { 
        nFeConsultaProtocolo4Stub0.nfeConsultaNF(nFeConsultaProtocolo4Stub_NfeDadosMsg0);
        fail("Expecting exception: AxisFault");
      
      } catch(AxisFault e) {
         //
         // The system cannot infer the transport information from the https://nfe.sefaz.ms.gov.br/ws/NFeConsultaProtocolo4 URL.
         //
         verifyException("org.apache.axis2.description.ClientUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeResultMsg.Factory nFeConsultaProtocolo4Stub_NfeResultMsg_Factory0 = new NFeConsultaProtocolo4Stub.NfeResultMsg.Factory();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NFeConsultaProtocolo4Stub.ExtensionMapper nFeConsultaProtocolo4Stub_ExtensionMapper0 = new NFeConsultaProtocolo4Stub.ExtensionMapper();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = null;
      try {
        nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = null;
      try {
        nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      OMDOMMetaFactory oMDOMMetaFactory0 = OMDOMMetaFactory.INSTANCE;
      SOAPFactory sOAPFactory0 = oMDOMMetaFactory0.getSOAP12Factory();
      OMSourcedElementImpl oMSourcedElementImpl0 = (OMSourcedElementImpl)nFeConsultaProtocolo4Stub_NfeResultMsg0.getOMElement(nFeConsultaProtocolo4Stub_NfeDadosMsg0.MY_QNAME, sOAPFactory0);
      assertEquals((short)1, oMSourcedElementImpl0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      OMElement oMElement0 = nFeConsultaProtocolo4Stub_NfeResultMsg0.getExtraElement();
      assertNull(oMElement0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      NFeConsultaProtocolo4Stub.NfeResultMsg nFeConsultaProtocolo4Stub_NfeResultMsg0 = new NFeConsultaProtocolo4Stub.NfeResultMsg();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "CopyProperties", writerConfig0);
      try { 
        nFeConsultaProtocolo4Stub_NfeResultMsg0.serialize(nFeConsultaProtocolo4Stub_NfeDadosMsg0.MY_QNAME, (XMLStreamWriter) simpleNsStreamWriter0);
        fail("Expecting exception: ADBException");
      
      } catch(ADBException e) {
         //
         // extraElement cannot be null!!
         //
         verifyException("br.com.swconsultoria.nfe.wsdl.NFeConsultaProtocoloMS.NFeConsultaProtocolo4Stub$NfeResultMsg", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AxisConfiguration axisConfiguration0 = new AxisConfiguration();
      ConfigurationContext configurationContext0 = new ConfigurationContext(axisConfiguration0);
      NFeConsultaProtocolo4Stub nFeConsultaProtocolo4Stub0 = new NFeConsultaProtocolo4Stub(configurationContext0);
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      NFeConsultaProtocolo4CallbackHandler nFeConsultaProtocolo4CallbackHandler0 = mock(NFeConsultaProtocolo4CallbackHandler.class, new ViolatedAssumptionAnswer());
      try { 
        nFeConsultaProtocolo4Stub0.startnfeConsultaNF(nFeConsultaProtocolo4Stub_NfeDadosMsg0, nFeConsultaProtocolo4CallbackHandler0);
        fail("Expecting exception: AxisFault");
      
      } catch(AxisFault e) {
         //
         // The system cannot infer the transport information from the https://nfe.sefaz.ms.gov.br/ws/NFeConsultaProtocolo4 URL.
         //
         verifyException("org.apache.axis2.description.ClientUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg nFeConsultaProtocolo4Stub_NfeDadosMsg0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg();
      OMElement oMElement0 = nFeConsultaProtocolo4Stub_NfeDadosMsg0.getExtraElement();
      assertNull(oMElement0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NFeConsultaProtocolo4Stub.NfeDadosMsg.Factory nFeConsultaProtocolo4Stub_NfeDadosMsg_Factory0 = new NFeConsultaProtocolo4Stub.NfeDadosMsg.Factory();
  }
}
