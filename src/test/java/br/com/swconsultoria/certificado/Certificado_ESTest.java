/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 05:38:35 GMT 2024
 */

package br.com.swconsultoria.certificado;

import org.junit.Test;
import static org.junit.Assert.*;
import br.com.swconsultoria.certificado.Certificado;
import br.com.swconsultoria.certificado.TipoCertificadoEnum;
import java.math.BigInteger;
import java.security.Provider;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Certificado_ESTest extends Certificado_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      certificado0.setVencimento(localDate0);
      LocalDate localDate1 = certificado0.getVencimento();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      TipoCertificadoEnum tipoCertificadoEnum0 = TipoCertificadoEnum.REPOSITORIO_MAC;
      certificado0.setTipoCertificado(tipoCertificadoEnum0);
      TipoCertificadoEnum tipoCertificadoEnum1 = certificado0.getTipoCertificado();
      assertSame(tipoCertificadoEnum1, tipoCertificadoEnum0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-118);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      certificado0.setNumeroSerie(bigInteger0);
      BigInteger bigInteger1 = certificado0.getNumeroSerie();
      assertEquals((short) (-30208), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      BigInteger bigInteger0 = BigInteger.ZERO;
      certificado0.setNumeroSerie(bigInteger0);
      BigInteger bigInteger1 = certificado0.getNumeroSerie();
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      certificado0.setNumeroSerie(bigInteger0);
      BigInteger bigInteger1 = certificado0.getNumeroSerie();
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-61);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      certificado0.setNumeroSerie(bigInteger0);
      BigInteger bigInteger1 = certificado0.getNumeroSerie();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.setNome("Certificado{nome='");
      String string0 = certificado0.getNome();
      assertEquals("Certificado{nome='", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.setNome("");
      String string0 = certificado0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      Long long0 = new Long(0L);
      certificado0.setDiasRestantes(long0);
      Long long1 = certificado0.getDiasRestantes();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      Long long0 = new Long((-2533L));
      certificado0.setDiasRestantes(long0);
      Long long1 = certificado0.getDiasRestantes();
      assertEquals((-2533L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      Long long0 = new Long(1517L);
      certificado0.setDiasRestantes(long0);
      Long long1 = certificado0.getDiasRestantes();
      assertEquals(1517L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      certificado0.setDataHoraVencimento(localDateTime0);
      LocalDateTime localDateTime1 = certificado0.getDataHoraVencimento();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.setCnpjCpf(" ]4d)OWNS`s.K_3=E8,");
      String string0 = certificado0.getCnpjCpf();
      assertEquals(" ]4d)OWNS`s.K_3=E8,", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.setCnpjCpf("");
      String string0 = certificado0.getCnpjCpf();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      byte[] byteArray0 = new byte[1];
      certificado0.setArquivoBytes(byteArray0);
      byte[] byteArray1 = certificado0.getArquivoBytes();
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      byte[] byteArray0 = new byte[0];
      certificado0.setArquivoBytes(byteArray0);
      byte[] byteArray1 = certificado0.getArquivoBytes();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.setArquivo("Z>cu-1J$>PfMaV+");
      String string0 = certificado0.getArquivo();
      assertEquals("Z>cu-1J$>PfMaV+", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.setArquivo("");
      String string0 = certificado0.getArquivo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      String string0 = certificado0.getSenha();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      String string0 = certificado0.getArquivo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      BigInteger bigInteger0 = certificado0.getNumeroSerie();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      byte[] byteArray0 = certificado0.getArquivoBytes();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.getTipoCertificado();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      String string0 = certificado0.getSslProtocol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      String string0 = certificado0.getCnpjCpf();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      String string0 = certificado0.toString();
      assertEquals("Certificado{nome='null', dataHoraVencimento=null, cnpjCpf='null', tipoCertificado=null}", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      Long long0 = certificado0.getDiasRestantes();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      LocalDate localDate0 = certificado0.getVencimento();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      LocalDateTime localDateTime0 = certificado0.getDataHoraVencimento();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      String string0 = certificado0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.setSenha("H=(KC;");
      assertNull(certificado0.getTipoCertificado());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      certificado0.setValido(true);
      assertNull(certificado0.getSenha());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      Provider provider0 = certificado0.getProvider();
      assertNull(provider0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Certificado certificado0 = new Certificado();
      boolean boolean0 = certificado0.isValido();
      assertFalse(boolean0);
  }
}
