/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 09:22:18 GMT 2024
 */

package br.com.swconsultoria.nfe.schema.epec;

import org.junit.Test;
import static org.junit.Assert.*;
import br.com.swconsultoria.nfe.schema.epec.TEnvEvento;
import br.com.swconsultoria.nfe.schema.epec.TEvento;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TEnvEvento_ESTest extends TEnvEvento_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      tEnvEvento0.setVersao("");
      assertNull(tEnvEvento0.getIdLote());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      tEnvEvento0.versao = "MG";
      String string0 = tEnvEvento0.getVersao();
      assertEquals("MG", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      tEnvEvento0.versao = "";
      String string0 = tEnvEvento0.getVersao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      tEnvEvento0.setIdLote("6[W^]prS]c");
      String string0 = tEnvEvento0.getIdLote();
      assertEquals("6[W^]prS]c", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      tEnvEvento0.idLote = "";
      String string0 = tEnvEvento0.getIdLote();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      LinkedList<TEvento> linkedList0 = new LinkedList<TEvento>();
      TEvento tEvento0 = new TEvento();
      linkedList0.add(tEvento0);
      tEnvEvento0.evento = (List<TEvento>) linkedList0;
      List<TEvento> list0 = tEnvEvento0.getEvento();
      assertTrue(list0.contains(tEvento0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      tEnvEvento0.getEvento();
      List<TEvento> list0 = tEnvEvento0.getEvento();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      String string0 = tEnvEvento0.getVersao();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      String string0 = tEnvEvento0.getIdLote();
      assertNull(string0);
  }
}
