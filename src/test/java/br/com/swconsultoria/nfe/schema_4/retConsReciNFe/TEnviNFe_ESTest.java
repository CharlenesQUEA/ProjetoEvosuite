/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 06:20:49 GMT 2024
 */

package br.com.swconsultoria.nfe.schema_4.retConsReciNFe;

import org.junit.Test;
import static org.junit.Assert.*;
import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TEnviNFe;
import br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TNFe;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TEnviNFe_ESTest extends TEnviNFe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      tEnviNFe0.setVersao("X$_0CGr`1oN<`)o");
      String string0 = tEnviNFe0.getVersao();
      assertEquals("X$_0CGr`1oN<`)o", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      tEnviNFe0.setVersao("");
      String string0 = tEnviNFe0.getVersao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      LinkedList<TNFe> linkedList0 = new LinkedList<TNFe>();
      tEnviNFe0.nFe = (List<TNFe>) linkedList0;
      TNFe tNFe0 = new TNFe();
      linkedList0.add(tNFe0);
      List<TNFe> list0 = tEnviNFe0.getNFe();
      assertTrue(list0.contains(tNFe0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      tEnviNFe0.setIndSinc(";waL &DM!K =");
      String string0 = tEnviNFe0.getIndSinc();
      assertEquals(";waL &DM!K =", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      tEnviNFe0.setIndSinc("");
      String string0 = tEnviNFe0.getIndSinc();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      tEnviNFe0.setIdLote(" ZNw}{n[^:baE@x");
      String string0 = tEnviNFe0.getIdLote();
      assertEquals(" ZNw}{n[^:baE@x", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      tEnviNFe0.setIdLote("");
      String string0 = tEnviNFe0.getIdLote();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      List<TNFe> list0 = tEnviNFe0.getNFe();
      List<TNFe> list1 = tEnviNFe0.getNFe();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      String string0 = tEnviNFe0.getVersao();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      String string0 = tEnviNFe0.getIdLote();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      String string0 = tEnviNFe0.getIndSinc();
      assertNull(string0);
  }
}
