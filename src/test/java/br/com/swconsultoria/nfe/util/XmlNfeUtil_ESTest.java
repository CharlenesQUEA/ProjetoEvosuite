/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 05:49:10 GMT 2024
 */

package br.com.swconsultoria.nfe.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.swconsultoria.nfe.schema.consCad.TConsCad;
import br.com.swconsultoria.nfe.schema.distdfeint.DistDFeInt;
import br.com.swconsultoria.nfe.schema.envEpec.TRetEnvEvento;
import br.com.swconsultoria.nfe.schema.envEpec.TRetEvento;
import br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TEnvEvento;
import br.com.swconsultoria.nfe.schema.envcce.TEvento;
import br.com.swconsultoria.nfe.schema.envcce.TProcEvento;
import br.com.swconsultoria.nfe.schema.retConsCad.TRetConsCad;
import br.com.swconsultoria.nfe.schema.retdistdfeint.RetDistDFeInt;
import br.com.swconsultoria.nfe.schema_4.consReciNFe.TConsReciNFe;
import br.com.swconsultoria.nfe.schema_4.consStatServ.TConsStatServ;
import br.com.swconsultoria.nfe.schema_4.enviNFe.SignatureType;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TEnviNFe;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TNfeProc;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TProtNFe;
import br.com.swconsultoria.nfe.schema_4.enviNFe.TRetEnviNFe;
import br.com.swconsultoria.nfe.schema_4.inutNFe.TInutNFe;
import br.com.swconsultoria.nfe.schema_4.inutNFe.TProcInutNFe;
import br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TRetConsSitNFe;
import br.com.swconsultoria.nfe.schema_4.retConsStatServ.TRetConsStatServ;
import br.com.swconsultoria.nfe.util.XmlNfeUtil;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.file.InvalidPathException;
import java.security.InvalidParameterException;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ValueRange;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.zip.ZipException;
import javax.xml.bind.DataBindingException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;
import sun.nio.cs.MS1252;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlNfeUtil_ESTest extends XmlNfeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TProcEvento tProcEvento0 = new TProcEvento();
      assertNull(tProcEvento0.getVersao());
      assertNotNull(tProcEvento0);
      
      TEvento tEvento0 = null;
      tProcEvento0.setEvento((TEvento) null);
      assertNull(tProcEvento0.getVersao());
      
      tProcEvento0.setEvento((TEvento) null);
      assertNull(tProcEvento0.getVersao());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tProcEvento0.getVersao());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave deve conter 44 caracteres.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      assertNull(tEnvEvento0.getIdLote());
      assertNull(tEnvEvento0.getVersao());
      assertNotNull(tEnvEvento0);
      
      TRetEnvEvento tRetEnvEvento0 = new TRetEnvEvento();
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVersao());
      assertNotNull(tRetEnvEvento0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVersao());
      assertNotNull(string0);
      
      Class<TConsCad> class0 = TConsCad.class;
      // Undeclared exception!
      try { 
        XmlNfeUtil.xmlToObject(",", class0);
        fail("Expecting exception: DataBindingException");
      
      } catch(DataBindingException e) {
         //
         // javax.xml.bind.UnmarshalException
         //  - with linked exception:
         // [org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.]
         //
         verifyException("javax.xml.bind.JAXB", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoCancNFe.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoCancNFe.TRetEnvEvento();
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNotNull(tRetEnvEvento0);
      
      String string0 = "\"^U{lXr<<\\n@\\bzr";
      tRetEnvEvento0.setIdLote("\"^U{lXr<<\n@\bzr");
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertEquals("\"^U{lXr<<\n@\bzr", tRetEnvEvento0.getIdLote());
      
      tRetEnvEvento0.setCStat("\"^U{lXr<<\n@\bzr");
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertEquals("\"^U{lXr<<\n@\bzr", tRetEnvEvento0.getIdLote());
      assertEquals("\"^U{lXr<<\n@\bzr", tRetEnvEvento0.getCStat());
      
      String string1 = "TRetEnviNFe";
      tRetEnvEvento0.setCStat("TRetEnviNFe");
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getVersao());
      assertEquals("TRetEnviNFe", tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertEquals("\"^U{lXr<<\n@\bzr", tRetEnvEvento0.getIdLote());
      
      tRetEnvEvento0.setIdLote("");
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getVersao());
      assertEquals("TRetEnviNFe", tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertEquals("", tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      
      tRetEnvEvento0.setTpAmb("QO~Ul'q+Plg");
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getVersao());
      assertEquals("QO~Ul'q+Plg", tRetEnvEvento0.getTpAmb());
      assertEquals("TRetEnviNFe", tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertEquals("", tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      
      Charset charset0 = null;
      String string2 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, (Charset) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"><idLote></idLote><tpAmb>QO~Ul'q+Plg</tpAmb><cStat>TRetEnviNFe</cStat></procEvento>", string2);
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getVersao());
      assertEquals("QO~Ul'q+Plg", tRetEnvEvento0.getTpAmb());
      assertEquals("TRetEnviNFe", tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertEquals("", tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Class<br.com.swconsultoria.nfe.schema.envcce.TEnvEvento> class0 = br.com.swconsultoria.nfe.schema.envcce.TEnvEvento.class;
      tRetEnvEvento0.setIdLote("\"^U{lXr<<\n@\bzr");
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getVersao());
      assertEquals("QO~Ul'q+Plg", tRetEnvEvento0.getTpAmb());
      assertEquals("TRetEnviNFe", tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertEquals("\"^U{lXr<<\n@\bzr", tRetEnvEvento0.getIdLote());
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.xmlToObject("\"^U{lXr<<\n@\bzr", class0);
        fail("Expecting exception: DataBindingException");
      
      } catch(DataBindingException e) {
         //
         // javax.xml.bind.UnmarshalException
         //  - with linked exception:
         // [org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.]
         //
         verifyException("javax.xml.bind.JAXB", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envConfRecebto.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envConfRecebto.TProcEvento();
      assertNull(tProcEvento0.getVersao());
      assertNotNull(tProcEvento0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tProcEvento0.getVersao());
      assertNotNull(string0);
      
      br.com.swconsultoria.nfe.schema.envConfRecebto.TEvento tEvento0 = new br.com.swconsultoria.nfe.schema.envConfRecebto.TEvento();
      assertNull(tEvento0.getVersao());
      assertNotNull(tEvento0);
      
      tProcEvento0.setEvento(tEvento0);
      assertNull(tProcEvento0.getVersao());
      assertNull(tEvento0.getVersao());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        ZoneId.of("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // aliasMap
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TConsReciNFe tConsReciNFe0 = new TConsReciNFe();
      assertNull(tConsReciNFe0.getTpAmb());
      assertNull(tConsReciNFe0.getNRec());
      assertNull(tConsReciNFe0.getVersao());
      assertNotNull(tConsReciNFe0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tConsReciNFe0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><consReciNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tConsReciNFe0.getTpAmb());
      assertNull(tConsReciNFe0.getNRec());
      assertNull(tConsReciNFe0.getVersao());
      assertNotNull(string0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      tConsReciNFe0.setTpAmb("<?xml version=\"1.0\" encoding=\"UTF-8\"?><consReciNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>");
      assertNull(tConsReciNFe0.getNRec());
      assertNull(tConsReciNFe0.getVersao());
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><consReciNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", tConsReciNFe0.getTpAmb());
      
      String string1 = XmlNfeUtil.dataNfe(localDateTime0);
      assertEquals("2014-02-14T20:21:21Z", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("<?xml version=\"1.0\" encoding=\"UTF-8\"?><consReciNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DistDFeInt distDFeInt0 = new DistDFeInt();
      assertNull(distDFeInt0.getCPF());
      assertNull(distDFeInt0.getCUFAutor());
      assertNull(distDFeInt0.getVersao());
      assertNull(distDFeInt0.getTpAmb());
      assertNull(distDFeInt0.getCNPJ());
      assertNotNull(distDFeInt0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertNotNull(charset0);
      
      distDFeInt0.setVersao("");
      assertNull(distDFeInt0.getCPF());
      assertNull(distDFeInt0.getCUFAutor());
      assertEquals("", distDFeInt0.getVersao());
      assertNull(distDFeInt0.getTpAmb());
      assertNull(distDFeInt0.getCNPJ());
      
      Set<String> set0 = charset0.aliases();
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) distDFeInt0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><distDFeInt versao=\"\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(distDFeInt0.getCPF());
      assertNull(distDFeInt0.getCUFAutor());
      assertEquals("", distDFeInt0.getVersao());
      assertNull(distDFeInt0.getTpAmb());
      assertNull(distDFeInt0.getCNPJ());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TNfeProc tNfeProc0 = new TNfeProc();
      assertNull(tNfeProc0.getVersao());
      assertNotNull(tNfeProc0);
      
      tNfeProc0.setProtNFe((TProtNFe) null);
      assertNull(tNfeProc0.getVersao());
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.toString());
      assertNotNull(charset0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tNfeProc0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><nfeProc xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tNfeProc0.getVersao());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.toString());
      assertNotNull(string0);
      
      Class<TProcEvento> class0 = TProcEvento.class;
      TProcEvento tProcEvento0 = XmlNfeUtil.xmlToObject("<?xml version=\"1.0\" encoding=\"windows-1252\"?><nfeProc xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", class0);
      assertNull(tProcEvento0.getVersao());
      assertNotNull(tProcEvento0);
      
      Class<TEnvEvento> class1 = TEnvEvento.class;
      // Undeclared exception!
      try { 
        XmlNfeUtil.xmlToObject("\"AY", class1);
        fail("Expecting exception: DataBindingException");
      
      } catch(DataBindingException e) {
         //
         // javax.xml.bind.UnmarshalException
         //  - with linked exception:
         // [org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.]
         //
         verifyException("javax.xml.bind.JAXB", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      assertNotNull(localDateTime0);
      
      String string0 = XmlNfeUtil.dataNfe(localDateTime0, (ZoneId) null);
      assertEquals("2014-02-14T20:21:21-02:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TNfeProc tNfeProc0 = new TNfeProc();
      assertNull(tNfeProc0.getVersao());
      assertNotNull(tNfeProc0);
      
      tNfeProc0.setVersao("Arquivo ");
      assertEquals("Arquivo ", tNfeProc0.getVersao());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tNfeProc0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><nfeProc versao=\"Arquivo \" xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertEquals("Arquivo ", tNfeProc0.getVersao());
      assertNotNull(string0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.dataNfe(localDateTime0, (ZoneId) zoneOffset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envcce.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envcce.TEnvEvento();
      assertNull(tEnvEvento0.getVersao());
      assertNull(tEnvEvento0.getIdLote());
      assertNotNull(tEnvEvento0);
      
      List<TEvento> list0 = tEnvEvento0.getEvento();
      assertNull(tEnvEvento0.getVersao());
      assertNull(tEnvEvento0.getIdLote());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertNotNull(charset0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tEnvEvento0.getVersao());
      assertNull(tEnvEvento0.getIdLote());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)44;
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TNFe tNFe0 = new TNFe();
      assertNotNull(tNFe0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("$");
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><NFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-31);
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TRetEnvEvento();
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNotNull(tRetEnvEvento0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertNotNull(charset0);
      
      int int0 = 8;
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      ByteBuffer byteBuffer1 = ByteBuffer.allocateDirect(8);
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(8, byteBuffer1.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=8 cap=8]", byteBuffer1.toString());
      assertEquals(8, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.isDirect());
      assertEquals(8, byteBuffer1.remaining());
      assertNotNull(byteBuffer1);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      
      ByteBuffer byteBuffer2 = charset0.encode("g/}");
      assertNotSame(byteBuffer2, byteBuffer0);
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertFalse(byteBuffer2.isDirect());
      assertFalse(byteBuffer2.isReadOnly());
      assertEquals(3, byteBuffer2.limit());
      assertEquals(3, byteBuffer2.remaining());
      assertEquals(0, byteBuffer2.arrayOffset());
      assertTrue(byteBuffer2.hasRemaining());
      assertEquals(3, byteBuffer2.capacity());
      assertEquals(0, byteBuffer2.position());
      assertTrue(byteBuffer2.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer2.toString());
      assertNotNull(byteBuffer2);
      assertFalse(byteBuffer2.equals((Object)byteBuffer1));
      assertFalse(byteBuffer2.equals((Object)byteBuffer0));
      
      byte byte0 = byteBuffer1.get();
      assertEquals((byte)0, byte0);
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(8, byteBuffer1.limit());
      assertEquals(8, byteBuffer1.capacity());
      assertFalse(byteBuffer1.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=8 cap=8]", byteBuffer1.toString());
      assertTrue(byteBuffer1.isDirect());
      assertEquals(7, byteBuffer1.remaining());
      assertEquals(1, byteBuffer1.position());
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(byteBuffer1.equals((Object)byteBuffer2));
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer1);
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("java.nio.DirectByteBuffer[pos=8 lim=8 cap=8]", byteBuffer1.toString());
      assertEquals(8, byteBuffer1.position());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(8, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(8, byteBuffer1.capacity());
      assertFalse(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      assertFalse(byteBuffer1.equals((Object)byteBuffer2));
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arquivo xml n\u00E3o pode ser nulo/vazio.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TRetConsCad tRetConsCad0 = new TRetConsCad();
      assertNull(tRetConsCad0.getVersao());
      assertNotNull(tRetConsCad0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tRetConsCad0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><retConsCad xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tRetConsCad0.getVersao());
      assertNotNull(string0);
      
      tRetConsCad0.setVersao("<?xml version=\"1.0\" encoding=\"UTF-8\"?><retConsCad xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>");
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><retConsCad xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", tRetConsCad0.getVersao());
      
      Class<TRetEnvEvento> class0 = TRetEnvEvento.class;
      TRetEnvEvento tRetEnvEvento0 = XmlNfeUtil.xmlToObject("<?xml version=\"1.0\" encoding=\"UTF-8\"?><retConsCad xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", class0);
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNotNull(tRetEnvEvento0);
      
      MS1252 mS1252_0 = (MS1252)Charset.defaultCharset();
      assertTrue(mS1252_0.isRegistered());
      assertEquals("windows-1252", mS1252_0.displayName());
      assertEquals("windows-1252", mS1252_0.name());
      assertEquals("windows-1252", mS1252_0.toString());
      assertTrue(mS1252_0.canEncode());
      assertNotNull(mS1252_0);
      
      try { 
        XmlNfeUtil.objectToXml((Object) class0, (Charset) mS1252_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Objeto n\u00E3o mapeado no XmlUtil:Class
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TProcInutNFe tProcInutNFe0 = new TProcInutNFe();
      assertNull(tProcInutNFe0.getVersao());
      assertNotNull(tProcInutNFe0);
      
      tProcInutNFe0.setVersao("G2zuqMtJYe&+)bMXQ");
      assertEquals("G2zuqMtJYe&+)bMXQ", tProcInutNFe0.getVersao());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tProcInutNFe0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procInutNFe versao=\"G2zuqMtJYe&amp;+)bMXQ\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertEquals("G2zuqMtJYe&+)bMXQ", tProcInutNFe0.getVersao());
      assertNotNull(string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("", "");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave n\u00E3o deve ser nula ou vazia
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEpec.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEpec.TEnvEvento();
      assertNull(tEnvEvento0.getIdLote());
      assertNull(tEnvEvento0.getVersao());
      assertNotNull(tEnvEvento0);
      
      List<br.com.swconsultoria.nfe.schema.envEpec.TEvento> list0 = tEnvEvento0.getEvento();
      assertNull(tEnvEvento0.getIdLote());
      assertNull(tEnvEvento0.getVersao());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tEnvEvento0.getIdLote());
      assertNull(tEnvEvento0.getVersao());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TRetEnvEvento();
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNotNull(tRetEnvEvento0);
      
      tRetEnvEvento0.setXMotivo("7T+*x");
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertEquals("7T+*x", tRetEnvEvento0.getXMotivo());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"><xMotivo>7T+*x</xMotivo></procEvento>", string0);
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertEquals("7T+*x", tRetEnvEvento0.getXMotivo());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.objectToXml((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TRetConsStatServ tRetConsStatServ0 = new TRetConsStatServ();
      assertNull(tRetConsStatServ0.getVerAplic());
      assertNull(tRetConsStatServ0.getXMotivo());
      assertNull(tRetConsStatServ0.getDhRecbto());
      assertNull(tRetConsStatServ0.getDhRetorno());
      assertNull(tRetConsStatServ0.getCStat());
      assertNull(tRetConsStatServ0.getVersao());
      assertNull(tRetConsStatServ0.getTpAmb());
      assertNull(tRetConsStatServ0.getXObs());
      assertNull(tRetConsStatServ0.getTMed());
      assertNull(tRetConsStatServ0.getCUF());
      assertNotNull(tRetConsStatServ0);
      
      tRetConsStatServ0.setCUF("br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe$InfNFe$Total$ICMSTot");
      assertNull(tRetConsStatServ0.getVerAplic());
      assertNull(tRetConsStatServ0.getXMotivo());
      assertEquals("br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe$InfNFe$Total$ICMSTot", tRetConsStatServ0.getCUF());
      assertNull(tRetConsStatServ0.getDhRecbto());
      assertNull(tRetConsStatServ0.getDhRetorno());
      assertNull(tRetConsStatServ0.getCStat());
      assertNull(tRetConsStatServ0.getVersao());
      assertNull(tRetConsStatServ0.getTpAmb());
      assertNull(tRetConsStatServ0.getXObs());
      assertNull(tRetConsStatServ0.getTMed());
      
      tRetConsStatServ0.setXObs("hv%SZ|*9FiX8^HL");
      assertNull(tRetConsStatServ0.getVerAplic());
      assertNull(tRetConsStatServ0.getXMotivo());
      assertEquals("br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe$InfNFe$Total$ICMSTot", tRetConsStatServ0.getCUF());
      assertNull(tRetConsStatServ0.getDhRecbto());
      assertNull(tRetConsStatServ0.getDhRetorno());
      assertNull(tRetConsStatServ0.getCStat());
      assertNull(tRetConsStatServ0.getVersao());
      assertNull(tRetConsStatServ0.getTpAmb());
      assertNull(tRetConsStatServ0.getTMed());
      assertEquals("hv%SZ|*9FiX8^HL", tRetConsStatServ0.getXObs());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tRetConsStatServ0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><retConsStatServ xmlns=\"http://www.portalfiscal.inf.br/nfe\"><cUF>br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe$InfNFe$Total$ICMSTot</cUF><xObs>hv%SZ|*9FiX8^HL</xObs></retConsStatServ>", string0);
      assertNull(tRetConsStatServ0.getVerAplic());
      assertNull(tRetConsStatServ0.getXMotivo());
      assertEquals("br.com.swconsultoria.nfe.schema_4.enviNFe.TNFe$InfNFe$Total$ICMSTot", tRetConsStatServ0.getCUF());
      assertNull(tRetConsStatServ0.getDhRecbto());
      assertNull(tRetConsStatServ0.getDhRetorno());
      assertNull(tRetConsStatServ0.getCStat());
      assertNull(tRetConsStatServ0.getVersao());
      assertNull(tRetConsStatServ0.getTpAmb());
      assertNull(tRetConsStatServ0.getTMed());
      assertEquals("hv%SZ|*9FiX8^HL", tRetConsStatServ0.getXObs());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("nR>");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TProtNFe tProtNFe0 = new TProtNFe();
      assertNull(tProtNFe0.getVersao());
      assertNotNull(tProtNFe0);
      
      SignatureType signatureType0 = new SignatureType();
      assertNull(signatureType0.getId());
      assertNotNull(signatureType0);
      
      tProtNFe0.setSignature(signatureType0);
      assertNull(tProtNFe0.getVersao());
      assertNull(signatureType0.getId());
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tProtNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><Signature/></protNFe>", string0);
      assertNull(tProtNFe0.getVersao());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("<?xml version=\"1.0\" encoding=\"windows-1252\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><Signature/></protNFe>");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TConsStatServ tConsStatServ0 = new TConsStatServ();
      assertNull(tConsStatServ0.getVersao());
      assertNull(tConsStatServ0.getTpAmb());
      assertNull(tConsStatServ0.getXServ());
      assertNull(tConsStatServ0.getCUF());
      assertNotNull(tConsStatServ0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tConsStatServ0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><consStatServ xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tConsStatServ0.getVersao());
      assertNull(tConsStatServ0.getTpAmb());
      assertNull(tConsStatServ0.getXServ());
      assertNull(tConsStatServ0.getCUF());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        MockLocalDateTime.parse((CharSequence) "<?xml version=\"1.0\" encoding=\"UTF-8\"?><consStatServ xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '<?xml version=\"1.0\" encoding=\"UTF-8\"?><consStatServ xmlns=\"http:...' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TProtNFe tProtNFe0 = new br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TProtNFe();
      assertNull(tProtNFe0.getVersao());
      assertNotNull(tProtNFe0);
      
      br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TProtNFe.InfProt tProtNFe_InfProt0 = tProtNFe0.getInfProt();
      assertNull(tProtNFe0.getVersao());
      assertNull(tProtNFe_InfProt0);
      
      tProtNFe0.setInfProt((br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TProtNFe.InfProt) null);
      assertNull(tProtNFe0.getVersao());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tProtNFe0, (Charset) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tProtNFe0.getVersao());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(695, 8, 695, 0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): 695
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      assertEquals(ChronoField.OFFSET_SECONDS, chronoField0);
      
      int int0 = chronoField0.checkValidIntValue((-1175L));
      assertEquals((-1175), int0);
      
      boolean boolean0 = chronoField0.isTimeBased();
      assertFalse(boolean0);
      
      ValueRange valueRange0 = zoneOffset0.range(chronoField0);
      assertNotNull(valueRange0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.dataNfe((LocalDateTime) null, (ZoneId) zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TRetConsCad tRetConsCad0 = new TRetConsCad();
      assertNull(tRetConsCad0.getVersao());
      assertNotNull(tRetConsCad0);
      
      String string0 = "Unicode";
      TRetConsCad.InfCons tRetConsCad_InfCons0 = tRetConsCad0.getInfCons();
      assertNull(tRetConsCad0.getVersao());
      assertNull(tRetConsCad_InfCons0);
      
      tRetConsCad0.setInfCons((TRetConsCad.InfCons) null);
      assertNull(tRetConsCad0.getVersao());
      
      tRetConsCad0.setVersao("Unicode");
      assertEquals("Unicode", tRetConsCad0.getVersao());
      
      tRetConsCad0.setVersao("Unicode");
      assertEquals("Unicode", tRetConsCad0.getVersao());
      
      tRetConsCad0.setInfCons((TRetConsCad.InfCons) null);
      assertEquals("Unicode", tRetConsCad0.getVersao());
      
      String string1 = XmlNfeUtil.objectToXml((Object) tRetConsCad0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><retConsCad versao=\"Unicode\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string1);
      assertEquals("Unicode", tRetConsCad0.getVersao());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "kZn3&,Ns#6~6xl[4/0";
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("<?xml version=\"1.0\" encoding=\"UTF-8\"?><retConsCad versao=\"Unicode\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", "kZn3&,Ns#6~6xl[4/0");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave deve conter 44 caracteres.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("w~yB", "w~yB");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave deve conter 44 caracteres.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TRetConsSitNFe tRetConsSitNFe0 = new TRetConsSitNFe();
      assertNull(tRetConsSitNFe0.getCStat());
      assertNull(tRetConsSitNFe0.getChNFe());
      assertNull(tRetConsSitNFe0.getXMotivo());
      assertNull(tRetConsSitNFe0.getVerAplic());
      assertNull(tRetConsSitNFe0.getTpAmb());
      assertNull(tRetConsSitNFe0.getVersao());
      assertNull(tRetConsSitNFe0.getCUF());
      assertNull(tRetConsSitNFe0.getDhRecbto());
      assertNotNull(tRetConsSitNFe0);
      
      br.com.swconsultoria.nfe.schema_4.retConsSitNFe.TProtNFe tProtNFe0 = tRetConsSitNFe0.getProtNFe();
      assertNull(tRetConsSitNFe0.getCStat());
      assertNull(tRetConsSitNFe0.getChNFe());
      assertNull(tRetConsSitNFe0.getXMotivo());
      assertNull(tRetConsSitNFe0.getVerAplic());
      assertNull(tRetConsSitNFe0.getTpAmb());
      assertNull(tRetConsSitNFe0.getVersao());
      assertNull(tRetConsSitNFe0.getCUF());
      assertNull(tRetConsSitNFe0.getDhRecbto());
      assertNull(tProtNFe0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.objectToXml((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        XmlNfeUtil.leXml("br.com.swconsultoria.nfe.schema.envcce.TRetEnvEvento");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Arquivo br.com.swconsultoria.nfe.schema.envcce.TRetEnvEvento n\u00E3o encontrado.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TProtNFe tProtNFe0 = new br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TProtNFe();
      assertNull(tProtNFe0.getVersao());
      assertNotNull(tProtNFe0);
      
      br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TProtNFe.InfProt tProtNFe_InfProt0 = new br.com.swconsultoria.nfe.schema_4.retConsReciNFe.TProtNFe.InfProt();
      assertNull(tProtNFe_InfProt0.getNProt());
      assertNull(tProtNFe_InfProt0.getXMsg());
      assertNull(tProtNFe_InfProt0.getCMsg());
      assertNull(tProtNFe_InfProt0.getDhRecbto());
      assertNull(tProtNFe_InfProt0.getChNFe());
      assertNull(tProtNFe_InfProt0.getXMotivo());
      assertNull(tProtNFe_InfProt0.getVerAplic());
      assertNull(tProtNFe_InfProt0.getCStat());
      assertNull(tProtNFe_InfProt0.getTpAmb());
      assertNull(tProtNFe_InfProt0.getId());
      assertNotNull(tProtNFe_InfProt0);
      
      tProtNFe_InfProt0.setCStat((String) null);
      assertNull(tProtNFe_InfProt0.getNProt());
      assertNull(tProtNFe_InfProt0.getXMsg());
      assertNull(tProtNFe_InfProt0.getCMsg());
      assertNull(tProtNFe_InfProt0.getDhRecbto());
      assertNull(tProtNFe_InfProt0.getChNFe());
      assertNull(tProtNFe_InfProt0.getXMotivo());
      assertNull(tProtNFe_InfProt0.getVerAplic());
      assertNull(tProtNFe_InfProt0.getCStat());
      assertNull(tProtNFe_InfProt0.getTpAmb());
      assertNull(tProtNFe_InfProt0.getId());
      
      tProtNFe_InfProt0.setChNFe("2?x\"CSFT=4({OooC");
      assertNull(tProtNFe_InfProt0.getNProt());
      assertNull(tProtNFe_InfProt0.getXMsg());
      assertNull(tProtNFe_InfProt0.getCMsg());
      assertNull(tProtNFe_InfProt0.getDhRecbto());
      assertNull(tProtNFe_InfProt0.getXMotivo());
      assertNull(tProtNFe_InfProt0.getVerAplic());
      assertEquals("2?x\"CSFT=4({OooC", tProtNFe_InfProt0.getChNFe());
      assertNull(tProtNFe_InfProt0.getCStat());
      assertNull(tProtNFe_InfProt0.getTpAmb());
      assertNull(tProtNFe_InfProt0.getId());
      
      tProtNFe_InfProt0.setTpAmb("2?x\"CSFT=4({OooC");
      assertNull(tProtNFe_InfProt0.getNProt());
      assertEquals("2?x\"CSFT=4({OooC", tProtNFe_InfProt0.getTpAmb());
      assertNull(tProtNFe_InfProt0.getXMsg());
      assertNull(tProtNFe_InfProt0.getCMsg());
      assertNull(tProtNFe_InfProt0.getDhRecbto());
      assertNull(tProtNFe_InfProt0.getXMotivo());
      assertNull(tProtNFe_InfProt0.getVerAplic());
      assertEquals("2?x\"CSFT=4({OooC", tProtNFe_InfProt0.getChNFe());
      assertNull(tProtNFe_InfProt0.getCStat());
      assertNull(tProtNFe_InfProt0.getId());
      
      tProtNFe0.setInfProt(tProtNFe_InfProt0);
      assertNull(tProtNFe0.getVersao());
      assertNull(tProtNFe_InfProt0.getNProt());
      assertEquals("2?x\"CSFT=4({OooC", tProtNFe_InfProt0.getTpAmb());
      assertNull(tProtNFe_InfProt0.getXMsg());
      assertNull(tProtNFe_InfProt0.getCMsg());
      assertNull(tProtNFe_InfProt0.getDhRecbto());
      assertNull(tProtNFe_InfProt0.getXMotivo());
      assertNull(tProtNFe_InfProt0.getVerAplic());
      assertEquals("2?x\"CSFT=4({OooC", tProtNFe_InfProt0.getChNFe());
      assertNull(tProtNFe_InfProt0.getCStat());
      assertNull(tProtNFe_InfProt0.getId());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tProtNFe0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><infProt><tpAmb>2?x\"CSFT=4({OooC</tpAmb><chNFe>2?x\"CSFT=4({OooC</chNFe></infProt></protNFe>", string0);
      assertNull(tProtNFe0.getVersao());
      assertNotNull(string0);
      
      tProtNFe0.setVersao("<?xml version=\"1.0\" encoding=\"UTF-8\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><infProt><tpAmb>2?x\"CSFT=4({OooC</tpAmb><chNFe>2?x\"CSFT=4({OooC</chNFe></infProt></protNFe>");
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><infProt><tpAmb>2?x\"CSFT=4({OooC</tpAmb><chNFe>2?x\"CSFT=4({OooC</chNFe></infProt></protNFe>", tProtNFe0.getVersao());
      
      Class<XmlNfeUtil> class0 = XmlNfeUtil.class;
      XmlNfeUtil xmlNfeUtil0 = XmlNfeUtil.xmlToObject("<?xml version=\"1.0\" encoding=\"UTF-8\"?><protNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><infProt><tpAmb>2?x\"CSFT=4({OooC</tpAmb><chNFe>2?x\"CSFT=4({OooC</chNFe></infProt></protNFe>", class0);
      assertNotNull(xmlNfeUtil0);
      
      try { 
        XmlNfeUtil.objectToXml((Object) class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Objeto n\u00E3o mapeado no XmlUtil:Class
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TInutNFe tInutNFe0 = new TInutNFe();
      assertNull(tInutNFe0.getVersao());
      assertNotNull(tInutNFe0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertNotNull(charset0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tInutNFe0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><inutNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tInutNFe0.getVersao());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.toString());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.name());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "<?xml version=\"1.0\" encoding=\"windows-1252\"?><inutNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", 0, 1650);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envcce.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envcce.TRetEnvEvento();
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getCStat());
      assertNotNull(tRetEnvEvento0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNull(tRetEnvEvento0.getCStat());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = XmlNfeUtil.gZipToXml((byte[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      assertNull(tEnviNFe0.getIndSinc());
      assertNull(tEnviNFe0.getIdLote());
      assertNull(tEnviNFe0.getVersao());
      assertNotNull(tEnviNFe0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.criaNfeProc(tEnviNFe0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2170);
      assertNotNull(zoneOffset0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      ByteBuffer byteBuffer0 = charset0.encode("RI*sY/");
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.remaining());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      Set<String> set1 = charset0.aliases();
      assertSame(set1, set0);
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertFalse(set1.isEmpty());
      assertEquals(2, set1.size());
      assertFalse(set1.contains("RI*sY/"));
      assertNotNull(set1);
      
      try { 
        XmlNfeUtil.objectToXml((Object) zoneOffset0, charset0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Objeto n\u00E3o mapeado no XmlUtil:ZoneOffset
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoCancNFe.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envEventoCancNFe.TRetEnvEvento();
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNotNull(tRetEnvEvento0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tRetEnvEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tRetEnvEvento0.getCStat());
      assertNull(tRetEnvEvento0.getIdLote());
      assertNull(tRetEnvEvento0.getVerAplic());
      assertNull(tRetEnvEvento0.getXMotivo());
      assertNull(tRetEnvEvento0.getCOrgao());
      assertNull(tRetEnvEvento0.getVersao());
      assertNull(tRetEnvEvento0.getTpAmb());
      assertNotNull(string0);
      
      String string1 = XmlNfeUtil.gZipToXml((byte[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.criaNfeProc((TEnviNFe) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TEnvEvento tEnvEvento0 = new TEnvEvento();
      assertNull(tEnvEvento0.getVersao());
      assertNull(tEnvEvento0.getIdLote());
      assertNotNull(tEnvEvento0);
      
      tEnvEvento0.setVersao(">|O(O+");
      assertNull(tEnvEvento0.getIdLote());
      assertEquals(">|O(O+", tEnvEvento0.getVersao());
      
      List<br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TEvento> list0 = tEnvEvento0.getEvento();
      assertNull(tEnvEvento0.getIdLote());
      assertEquals(">|O(O+", tEnvEvento0.getVersao());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      tEnvEvento0.setVersao("n'#vK2l9Hh;Nx{r'");
      assertEquals("n'#vK2l9Hh;Nx{r'", tEnvEvento0.getVersao());
      assertNull(tEnvEvento0.getIdLote());
      
      tEnvEvento0.setIdLote("Ze=YY1re(RU]U?M@");
      assertEquals("n'#vK2l9Hh;Nx{r'", tEnvEvento0.getVersao());
      assertEquals("Ze=YY1re(RU]U?M@", tEnvEvento0.getIdLote());
      
      List<br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.TEvento> list1 = tEnvEvento0.getEvento();
      assertSame(list1, list0);
      assertEquals("n'#vK2l9Hh;Nx{r'", tEnvEvento0.getVersao());
      assertEquals("Ze=YY1re(RU]U?M@", tEnvEvento0.getIdLote());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><envEvento versao=\"n'#vK2l9Hh;Nx{r'\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"><idLote>Ze=YY1re(RU]U?M@</idLote></envEvento>", string0);
      assertEquals("n'#vK2l9Hh;Nx{r'", tEnvEvento0.getVersao());
      assertEquals("Ze=YY1re(RU]U?M@", tEnvEvento0.getIdLote());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT((String) null, (String) null);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave n\u00E3o deve ser nula ou vazia
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envConfRecebto.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envConfRecebto.TEnvEvento();
      assertNull(tEnvEvento0.getIdLote());
      assertNull(tEnvEvento0.getVersao());
      assertNotNull(tEnvEvento0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tEnvEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><envEvento xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tEnvEvento0.getIdLote());
      assertNull(tEnvEvento0.getVersao());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("s./UB,'`eT", "vzT{u^fFP#");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave deve conter 44 caracteres.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arquivo xml n\u00E3o pode ser nulo/vazio.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEpec.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envEpec.TProcEvento();
      assertNull(tProcEvento0.getVersao());
      assertNotNull(tProcEvento0);
      
      TRetEvento tRetEvento0 = tProcEvento0.getRetEvento();
      assertNull(tProcEvento0.getVersao());
      assertNull(tRetEvento0);
      
      tProcEvento0.setRetEvento((TRetEvento) null);
      assertNull(tProcEvento0.getVersao());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><procEventoNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertNull(tProcEvento0.getVersao());
      assertNotNull(string0);
      
      long long0 = (-1686L);
      int int0 = (-819);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-819));
      assertNotNull(zoneOffset0);
      
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds((-819), 0, (-445128961));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value -819 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoCancSubst.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envEventoCancSubst.TProcEvento();
      assertNull(tProcEvento0.getVersao());
      assertNotNull(tProcEvento0);
      
      tProcEvento0.setVersao("R8G9nfuoEu");
      assertEquals("R8G9nfuoEu", tProcEvento0.getVersao());
      
      tProcEvento0.setRetEvento((br.com.swconsultoria.nfe.schema.envEventoCancSubst.TRetEvento) null);
      assertEquals("R8G9nfuoEu", tProcEvento0.getVersao());
      
      tProcEvento0.setVersao("R8G9nfuoEu");
      assertEquals("R8G9nfuoEu", tProcEvento0.getVersao());
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertNotNull(charset0);
      
      String string0 = XmlNfeUtil.objectToXml((Object) tProcEvento0, charset0);
      assertEquals("<?xml version=\"1.0\" encoding=\"windows-1252\"?><procEventoNFe versao=\"R8G9nfuoEu\" xmlns=\"http://www.portalfiscal.inf.br/nfe\"/>", string0);
      assertEquals("R8G9nfuoEu", tProcEvento0.getVersao());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds((-567), (-1154), 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value -567 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      assertNull(tEnviNFe0.getVersao());
      assertNull(tEnviNFe0.getIndSinc());
      assertNull(tEnviNFe0.getIdLote());
      assertNotNull(tEnviNFe0);
      
      tEnviNFe0.setVersao("9hm;0VzMRmu");
      assertNull(tEnviNFe0.getIndSinc());
      assertEquals("9hm;0VzMRmu", tEnviNFe0.getVersao());
      assertNull(tEnviNFe0.getIdLote());
      
      tEnviNFe0.setIndSinc("9hm;0VzMRmu");
      assertEquals("9hm;0VzMRmu", tEnviNFe0.getVersao());
      assertNull(tEnviNFe0.getIdLote());
      assertEquals("9hm;0VzMRmu", tEnviNFe0.getIndSinc());
      
      String string0 = "GXI5lY,fw!^";
      tEnviNFe0.setIdLote("GXI5lY,fw!^");
      assertEquals("9hm;0VzMRmu", tEnviNFe0.getVersao());
      assertEquals("GXI5lY,fw!^", tEnviNFe0.getIdLote());
      assertEquals("9hm;0VzMRmu", tEnviNFe0.getIndSinc());
      
      tEnviNFe0.setVersao("GXI5lY,fw!^");
      assertEquals("GXI5lY,fw!^", tEnviNFe0.getVersao());
      assertEquals("GXI5lY,fw!^", tEnviNFe0.getIdLote());
      assertEquals("9hm;0VzMRmu", tEnviNFe0.getIndSinc());
      
      tEnviNFe0.setIndSinc("GXI5lY,fw!^");
      assertEquals("GXI5lY,fw!^", tEnviNFe0.getVersao());
      assertEquals("GXI5lY,fw!^", tEnviNFe0.getIdLote());
      assertEquals("GXI5lY,fw!^", tEnviNFe0.getIndSinc());
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.criaNfeProc(tEnviNFe0, tEnviNFe0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      // Undeclared exception!
      try { 
        XmlNfeUtil.dataNfe((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      assertNull(tEnviNFe0.getIndSinc());
      assertNull(tEnviNFe0.getIdLote());
      assertNull(tEnviNFe0.getVersao());
      assertNotNull(tEnviNFe0);
      
      // Undeclared exception!
      try { 
        XmlNfeUtil.criaNfeProc(tEnviNFe0, tEnviNFe0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = null;
      Class<RetDistDFeInt> class0 = RetDistDFeInt.class;
      // Undeclared exception!
      try { 
        XmlNfeUtil.xmlToObject((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      assertNull(tEnviNFe0.getVersao());
      assertNull(tEnviNFe0.getIdLote());
      assertNull(tEnviNFe0.getIndSinc());
      assertNotNull(tEnviNFe0);
      
      tEnviNFe0.setIndSinc("F`u/o;qOvX>L");
      assertEquals("F`u/o;qOvX>L", tEnviNFe0.getIndSinc());
      assertNull(tEnviNFe0.getVersao());
      assertNull(tEnviNFe0.getIdLote());
      
      String string0 = XmlNfeUtil.objectToXml((Object) tEnviNFe0, (Charset) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><enviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><indSinc>F`u/o;qOvX>L</indSinc></enviNFe>", string0);
      assertEquals("F`u/o;qOvX>L", tEnviNFe0.getIndSinc());
      assertNull(tEnviNFe0.getVersao());
      assertNull(tEnviNFe0.getIdLote());
      assertNotNull(string0);
      
      try { 
        XmlNfeUtil.objectToXml((Object) "<?xml version=\"1.0\" encoding=\"UTF-8\"?><enviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><indSinc>F`u/o;qOvX>L</indSinc></enviNFe>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Objeto n\u00E3o mapeado no XmlUtil:String
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        XmlNfeUtil.objectToXml((Object) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte) (-20);
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "9y!1 ?6$7oaJ_";
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("9y!1 ?6$7oaJ_");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TRetEnviNFe tRetEnviNFe0 = new TRetEnviNFe();
      tRetEnviNFe0.setVerAplic("{^#O&Zr/Gye$MHf@kQ");
      XmlNfeUtil.objectToXml((Object) tRetEnviNFe0);
      try { 
        XmlNfeUtil.objectToXml((Object) "<?xml version=\"1.0\" encoding=\"UTF-8\"?><retEnviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><verAplic>{^#O&amp;Zr/Gye$MHf@kQ</verAplic></retEnviNFe>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Objeto n\u00E3o mapeado no XmlUtil:String
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      Charset charset0 = Charset.defaultCharset();
      XmlNfeUtil.objectToXml((Object) tEnviNFe0, charset0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)0;
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      try { 
        XmlNfeUtil.leXml("br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.SignedInfoType$SignatureMethod");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Arquivo br.com.swconsultoria.nfe.schema.envEventoAtorInteressado.SignedInfoType$SignatureMethod n\u00E3o encontrado.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(14, 14, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        XmlNfeUtil.dataNfe(localDateTime0, (ZoneId) zoneOffset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<TNFe> class0 = TNFe.class;
      // Undeclared exception!
      try { 
        XmlNfeUtil.xmlToObject("Brazil/East", class0);
        fail("Expecting exception: DataBindingException");
      
      } catch(DataBindingException e) {
         //
         // javax.xml.bind.UnmarshalException
         //  - with linked exception:
         // [org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.]
         //
         verifyException("javax.xml.bind.JAXB", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Month month0 = Month.NOVEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(16, month0, 1, 1, 16);
      String string0 = XmlNfeUtil.dataNfe(localDateTime0);
      assertEquals("0016-11-01T01:16:00Z", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<TRetEnvEvento> class0 = TRetEnvEvento.class;
      // Undeclared exception!
      try { 
        XmlNfeUtil.xmlToObject("oaUw`?9MZ]:ln", class0);
        fail("Expecting exception: DataBindingException");
      
      } catch(DataBindingException e) {
         //
         // javax.xml.bind.UnmarshalException
         //  - with linked exception:
         // [org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.]
         //
         verifyException("javax.xml.bind.JAXB", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "TRe?tEnviNFe";
      // Undeclared exception!
      try { 
        XmlNfeUtil.geraHashCSRT("TRe?tEnviNFe", "br.com.swconsultoria.nfe.schema.envEventoCancSubst.ReferenceType");
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Chave deve conter 44 caracteres.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      XmlNfeUtil.gZipToXml(byteArray0);
      br.com.swconsultoria.nfe.schema.envConfRecebto.TRetEnvEvento tRetEnvEvento0 = new br.com.swconsultoria.nfe.schema.envConfRecebto.TRetEnvEvento();
      tRetEnvEvento0.getRetEvento();
      tRetEnvEvento0.setXMotivo("");
      Charset charset0 = Charset.defaultCharset();
      XmlNfeUtil.objectToXml((Object) tRetEnvEvento0, charset0);
      // Undeclared exception!
      try { 
        XmlNfeUtil.leXml("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arquivo xml n\u00E3o pode ser nulo/vazio.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TEnviNFe tEnviNFe0 = new TEnviNFe();
      tEnviNFe0.setIndSinc("F`uo;OX");
      XmlNfeUtil.objectToXml((Object) tEnviNFe0, (Charset) null);
      try { 
        XmlNfeUtil.objectToXml((Object) "<?xml version=\"1.0\" encoding=\"UTF-8\"?><enviNFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><indSinc>F`uo;OX</indSinc></enviNFe>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Objeto n\u00E3o mapeado no XmlUtil:String
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 16, 16);
      XmlNfeUtil.dataNfe(localDateTime0);
      // Undeclared exception!
      try { 
        MockLocalDateTime.now((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envcce.TEnvEvento tEnvEvento0 = new br.com.swconsultoria.nfe.schema.envcce.TEnvEvento();
      tEnvEvento0.getEvento();
      tEnvEvento0.getEvento();
      Charset charset0 = Charset.defaultCharset();
      XmlNfeUtil.objectToXml((Object) tEnvEvento0, charset0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)44;
      try { 
        XmlNfeUtil.gZipToXml(byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)19;
      byteArray0[0] = (byte)19;
      byte byte1 = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)23;
      int int0 = 0;
      try { 
        XmlNfeUtil.leXml("br.com.swconsultoria.nfe.schema.envEventoCancSubst.TRetEnvEvento");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Arquivo br.com.swconsultoria.nfe.schema.envEventoCancSubst.TRetEnvEvento n\u00E3o encontrado.
         //
         verifyException("br.com.swconsultoria.nfe.util.XmlNfeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      br.com.swconsultoria.nfe.schema.envEventoCancSubst.TProcEvento tProcEvento0 = new br.com.swconsultoria.nfe.schema.envEventoCancSubst.TProcEvento();
      String string0 = "R8G9nfuoEu";
      tProcEvento0.setVersao("R8G9nfuoEu");
      tProcEvento0.setRetEvento((br.com.swconsultoria.nfe.schema.envEventoCancSubst.TRetEvento) null);
      tProcEvento0.setVersao("R8G9nfuoEu");
      Charset charset0 = Charset.defaultCharset();
      XmlNfeUtil.objectToXml((Object) tProcEvento0, charset0);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds((-567), (-1154), 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value -567 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }
}
