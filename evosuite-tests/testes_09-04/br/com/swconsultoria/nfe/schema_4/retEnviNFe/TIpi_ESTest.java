/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 06:26:30 GMT 2024
 */

package br.com.swconsultoria.nfe.schema_4.retEnviNFe;

import org.junit.Test;
import static org.junit.Assert.*;
import br.com.swconsultoria.nfe.schema_4.retEnviNFe.TIpi;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TIpi_ESTest extends TIpi_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.vipi = "Cc";
      String string0 = tIpi_IPITrib0.getVIPI();
      assertEquals("Cc", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setQUnid("");
      String string0 = tIpi_IPITrib0.getVIPI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.vUnid = "";
      String string0 = tIpi_IPITrib0.getVUnid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setQUnid("yN|D");
      String string0 = tIpi_IPITrib0.getQUnid();
      assertEquals("yN|D", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setVBC("");
      String string0 = tIpi_IPITrib0.getPIPI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setVUnid("br.com.swconsultoria.nfe.schema_4.retEnviNFe.TIpi");
      String string0 = tIpi_IPITrib0.getPIPI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.cst = "N^]$'";
      String string0 = tIpi_IPITrib0.getPIPI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setVIPI("br.com.swconsultoria.nfe.schema_4.retEnviNFe.TIpi$IPITrib");
      String string0 = tIpi_IPITrib0.getPIPI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setVBC("");
      String string0 = tIpi_IPITrib0.getVBC();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.cst = "";
      String string0 = tIpi_IPITrib0.getCST();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.setQSelo("xV!q");
      String string0 = tIpi0.getQSelo();
      assertEquals("xV!q", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi0.setIPITrib(tIpi_IPITrib0);
      TIpi.IPITrib tIpi_IPITrib1 = tIpi0.getIPITrib();
      assertNull(tIpi_IPITrib1.getVIPI());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      TIpi.IPINT tIpi_IPINT0 = new TIpi.IPINT();
      tIpi0.ipint = tIpi_IPINT0;
      TIpi.IPINT tIpi_IPINT1 = tIpi0.getIPINT();
      assertNull(tIpi_IPINT1.getCST());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.cSelo = "br.com.swconsultoria.nfe.schema_4.retEnviNFe.TIpi";
      String string0 = tIpi0.getCSelo();
      assertEquals("br.com.swconsultoria.nfe.schema_4.retEnviNFe.TIpi", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.setCSelo("");
      String string0 = tIpi0.getCSelo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.cnpjProd = "";
      String string0 = tIpi0.getCNPJProd();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.cEnq = "t)nTBUxi.i8Ar'V'oa*";
      String string0 = tIpi0.getCEnq();
      assertEquals("t)nTBUxi.i8Ar'V'oa*", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.cEnq = "";
      String string0 = tIpi0.getCEnq();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      String string0 = tIpi0.getCNPJProd();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      String string0 = tIpi0.getCEnq();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      TIpi.IPINT tIpi_IPINT0 = tIpi0.getIPINT();
      assertNull(tIpi_IPINT0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      TIpi.IPITrib tIpi_IPITrib0 = tIpi0.getIPITrib();
      assertNull(tIpi_IPITrib0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.setCEnq("");
      assertNull(tIpi0.getCNPJProd());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.setCNPJProd("n8+,esW!z>0={^J;");
      String string0 = tIpi0.getCNPJProd();
      assertEquals("n8+,esW!z>0={^J;", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      String string0 = tIpi0.getQSelo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      tIpi0.setQSelo("");
      String string0 = tIpi0.getQSelo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TIpi.IPINT tIpi_IPINT0 = new TIpi.IPINT();
      TIpi tIpi0 = new TIpi();
      tIpi0.setIPINT(tIpi_IPINT0);
      assertNull(tIpi0.getCNPJProd());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TIpi tIpi0 = new TIpi();
      String string0 = tIpi0.getCSelo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setPIPI("");
      assertNull(tIpi_IPITrib0.getQUnid());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setQUnid("yN|D");
      String string0 = tIpi_IPITrib0.getPIPI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TIpi.IPITrib tIpi_IPITrib0 = new TIpi.IPITrib();
      tIpi_IPITrib0.setCST("n8+,esW!z>0={^J;");
      assertNull(tIpi_IPITrib0.getVIPI());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TIpi.IPINT tIpi_IPINT0 = new TIpi.IPINT();
      tIpi_IPINT0.setCST("!");
      assertEquals("!", tIpi_IPINT0.getCST());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TIpi.IPINT tIpi_IPINT0 = new TIpi.IPINT();
      String string0 = tIpi_IPINT0.getCST();
      assertNull(string0);
  }
}
