/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 09:45:43 GMT 2024
 */

package br.com.swconsultoria.nfe.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.swconsultoria.nfe.dom.enuns.EstadosEnum;
import br.com.swconsultoria.nfe.util.ChaveUtil;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChaveUtil_ESTest extends ChaveUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EstadosEnum estadosEnum0 = EstadosEnum.CE;
      Month month0 = Month.JANUARY;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(9, month0, 9, 9, 0, 0, 9);
      assertNotNull(localDateTime0);
      
      ChaveUtil chaveUtil0 = new ChaveUtil(estadosEnum0, "Lx.F!", "", 2215, 2215, "", "vb<h0#6O", localDateTime0);
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(chaveUtil0);
      
      String string0 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string0);
      assertEquals("NFe230901000Lx.F!2215000002215vb<h0#6O0", string0);
      
      String string1 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("NFe230901000Lx.F!2215000002215vb<h0#6O0", string1);
      
      String string2 = ChaveUtil.completarComZerosAEsquerda("NFe230901000Lx.F!2215000002215vb<h0#6O0", 2685);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("NFe230901000Lx.F!2215000002215vb<h0#6O0", string3);
      
      String string4 = chaveUtil0.getDigitoVerificador();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("0", string4);
      
      String string5 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("NFe230901000Lx.F!2215000002215vb<h0#6O0", string5);
      
      String string6 = ChaveUtil.completarComZerosAEsquerda("NFe230901000Lx.F!2215000002215vb<h0#6O0", 197);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000NFe230901000Lx.F!2215000002215vb<h0#6O0", string6);
      
      String string7 = chaveUtil0.getDigitoVerificador();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("0", string7);
      
      String string8 = ChaveUtil.completarComZerosAEsquerda("NFe230901000Lx.F!2215000002215vb<h0#6O0", 197);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertEquals("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000NFe230901000Lx.F!2215000002215vb<h0#6O0", string8);
      
      String string9 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertEquals("NFe230901000Lx.F!2215000002215vb<h0#6O0", string9);
      
      String string10 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertEquals("NFe230901000Lx.F!2215000002215vb<h0#6O0", string10);
      
      String string11 = chaveUtil0.getDigitoVerificador();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertEquals("0", string11);
      
      String string12 = ChaveUtil.completarComZerosAEsquerda("", 1871);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string3));
      
      String string13 = ChaveUtil.completarComZerosAEsquerda("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000NFe230901000Lx.F!2215000002215vb<h0#6O0", 2215);
      assertNotNull(string13);
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string1));
      
      String string14 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string14);
      assertTrue(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string4));
      assertTrue(string14.equals((Object)string5));
      assertTrue(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertTrue(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string13));
      assertTrue(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string11));
      assertTrue(string14.equals((Object)string9));
      assertEquals("NFe230901000Lx.F!2215000002215vb<h0#6O0", string14);
      
      String string15 = ChaveUtil.completarComZerosAEsquerda("Lx.F!", 2683);
      assertNotNull(string15);
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string12));
      
      String string16 = chaveUtil0.getDigitoVerificador();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string16);
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string15));
      assertEquals("0", string16);
      
      // Undeclared exception!
      ChaveUtil.completarComZerosAEsquerda("NFe230901000Lx.F!2215000002215vb<h0#6O0", 3474);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EstadosEnum estadosEnum0 = EstadosEnum.RS;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      assertNotNull(zoneOffset0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(4276L, 0, zoneOffset0);
      assertNotNull(localDateTime0);
      
      ChaveUtil chaveUtil0 = new ChaveUtil(estadosEnum0, "", "", 20, 11, "", "", localDateTime0);
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(chaveUtil0);
      
      String string0 = chaveUtil0.getDigitoVerificador();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string0);
      assertEquals("0", string0);
      
      String string1 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NFe437001000020000000011000000000", string1);
      
      String string2 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("NFe437001000020000000011000000000", string2);
      
      ChaveUtil.completarComZerosAEsquerda("b:\"g6(Gd+[$u6", 948);
      chaveUtil0.getDigitoVerificador();
      chaveUtil0.getChaveNF();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EstadosEnum estadosEnum0 = EstadosEnum.PB;
      String string0 = "qSO5A6J4l]kN[d/";
      int int0 = (-458);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      ChaveUtil chaveUtil0 = new ChaveUtil(estadosEnum0, "qSO5A6J4l]kN[d/", "yyMM", (-458), (-458), "", "qSO5A6J4l]kN[d/", localDateTime0);
      assertEquals("6", chaveUtil0.getDigitoVerificador());
      assertNotNull(chaveUtil0);
      
      String string1 = chaveUtil0.getChaveNF();
      assertEquals("6", chaveUtil0.getDigitoVerificador());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NFe251402qSO5A6J4l]kN[d/yyMM-45800000-458qSO5A6J4l]kN[d/6", string1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        ChaveUtil.completarComZerosAEsquerda((String) null, (-458));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.ChaveUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EstadosEnum estadosEnum0 = EstadosEnum.MS;
      String string0 = null;
      int int0 = (-2672);
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      assertNotNull(localDateTime0);
      
      ChaveUtil chaveUtil0 = null;
      try {
        chaveUtil0 = new ChaveUtil(estadosEnum0, (String) null, "", 0, (-2672), "12", (String) null, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.ChaveUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(8);
      assertNotNull(zoneOffset0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(2408L, 0, zoneOffset0);
      assertNotNull(localDateTime0);
      
      String string0 = ChaveUtil.completarComZerosAEsquerda("P^}_e", 8);
      assertNotNull(string0);
      assertEquals("000P^}_e", string0);
      
      String string1 = ChaveUtil.completarComZerosAEsquerda("000P^}_e", 5187);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ChaveUtil.completarComZerosAEsquerda("", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(502, 3011, 750, 1551, 750, (-809), (-809));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 3011
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EstadosEnum estadosEnum0 = EstadosEnum.DF;
      String string0 = null;
      String string1 = "|oEl$>bd";
      int int0 = 1218;
      int int1 = 20;
      String string2 = "NFe";
      String string3 = "H,";
      long long0 = 0L;
      int int2 = 0;
      // Undeclared exception!
      try { 
        ZoneOffset.ofHours((-2768));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value -2768 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EstadosEnum estadosEnum0 = EstadosEnum.AM;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      ChaveUtil chaveUtil0 = new ChaveUtil(estadosEnum0, "", "wj>=.?NuIecg_-\"}?", 0, 4, "", "", localDateTime0);
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(chaveUtil0);
      
      String string0 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string0);
      assertEquals("NFe131402000wj>=.?NuIecg_-\"}?000000000004000000000", string0);
      
      String string1 = chaveUtil0.getDigitoVerificador();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      
      String string2 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("NFe131402000wj>=.?NuIecg_-\"}?000000000004000000000", string2);
      
      String string3 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NFe131402000wj>=.?NuIecg_-\"}?000000000004000000000", string3);
      
      String string4 = chaveUtil0.getChaveNF();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("NFe131402000wj>=.?NuIecg_-\"}?000000000004000000000", string4);
      
      String string5 = chaveUtil0.getDigitoVerificador();
      assertEquals("0", chaveUtil0.getDigitoVerificador());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("0", string5);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EstadosEnum estadosEnum0 = EstadosEnum.PE;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(2, 4, 4, 4, 2);
      ChaveUtil chaveUtil0 = new ChaveUtil(estadosEnum0, "", "", 4, 2, "", "lEHNed/", localDateTime0);
      String string0 = chaveUtil0.getChaveNF();
      assertEquals("NFe2602040000040000000020lEHNed/0", string0);
      
      ChaveUtil.completarComZerosAEsquerda("", 6);
      ChaveUtil.completarComZerosAEsquerda("NFe2602040000040000000020lEHNed/0", 2);
      ChaveUtil.completarComZerosAEsquerda("lEHNed/", 2);
      chaveUtil0.getDigitoVerificador();
      chaveUtil0.getDigitoVerificador();
      String string1 = chaveUtil0.getDigitoVerificador();
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ChaveUtil.completarComZerosAEsquerda("!0[&6`935mw0\"v", 19);
      ChaveUtil.completarComZerosAEsquerda("yyMM", 0);
      String string1 = ChaveUtil.completarComZerosAEsquerda("", (-2429));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EstadosEnum estadosEnum0 = EstadosEnum.PI;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, 7, 7, 0, 7, 7, 7);
      ChaveUtil chaveUtil0 = new ChaveUtil(estadosEnum0, "0f", "EE", 0, 7, "0f", "Cear\u00E1", localDateTime0);
      ChaveUtil.completarComZerosAEsquerda("!wBFLX,^sY", (-1848));
      chaveUtil0.getChaveNF();
      chaveUtil0.getChaveNF();
      chaveUtil0.getDigitoVerificador();
      chaveUtil0.getChaveNF();
      String string0 = chaveUtil0.getChaveNF();
      assertEquals("NFe2201070000fEE0000000000070f000Cear\u00E14", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      // Undeclared exception!
      try { 
        ChaveUtil.completarComZerosAEsquerda((String) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.swconsultoria.nfe.util.ChaveUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChaveUtil.completarComZerosAEsquerda("", 0);
      EstadosEnum estadosEnum0 = EstadosEnum.MT;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      ChaveUtil chaveUtil0 = new ChaveUtil(estadosEnum0, "J4<a0Bi3x~/9~l`<z", "", 0, 3218, "|$)DLG4o*R", "S'_-", localDateTime0);
      chaveUtil0.getChaveNF();
      ChaveUtil.completarComZerosAEsquerda("2*f", 3218);
      ZoneOffset.ofHours(9);
      chaveUtil0.getDigitoVerificador();
      ChaveUtil.completarComZerosAEsquerda("(-IL=", (-206));
      ChaveUtil.completarComZerosAEsquerda("(-IL=", 0);
      chaveUtil0.getChaveNF();
      chaveUtil0.getChaveNF();
      chaveUtil0.getChaveNF();
      chaveUtil0.getDigitoVerificador();
      chaveUtil0.getDigitoVerificador();
      chaveUtil0.getChaveNF();
      ChaveUtil.completarComZerosAEsquerda("(-IL=", (-48));
      chaveUtil0.getDigitoVerificador();
      chaveUtil0.getDigitoVerificador();
      chaveUtil0.getChaveNF();
      chaveUtil0.getChaveNF();
      String string0 = chaveUtil0.getChaveNF();
      assertEquals("NFe511402J4<a0Bi3x~/9~l`<z000000003218|$)DLG4o*R000S'_-7", string0);
  }
}
